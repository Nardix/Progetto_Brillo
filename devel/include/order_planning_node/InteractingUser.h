// Generated by gencpp from file order_planning_node/InteractingUser.msg
// DO NOT EDIT!


#ifndef ORDER_PLANNING_NODE_MESSAGE_INTERACTINGUSER_H
#define ORDER_PLANNING_NODE_MESSAGE_INTERACTINGUSER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace order_planning_node
{
template <class ContainerAllocator>
struct InteractingUser_
{
  typedef InteractingUser_<ContainerAllocator> Type;

  InteractingUser_()
    : name()
    , id()
    , position()
    , status()  {
    }
  InteractingUser_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , id(_alloc)
    , position(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::order_planning_node::InteractingUser_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_planning_node::InteractingUser_<ContainerAllocator> const> ConstPtr;

}; // struct InteractingUser_

typedef ::order_planning_node::InteractingUser_<std::allocator<void> > InteractingUser;

typedef boost::shared_ptr< ::order_planning_node::InteractingUser > InteractingUserPtr;
typedef boost::shared_ptr< ::order_planning_node::InteractingUser const> InteractingUserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_planning_node::InteractingUser_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_planning_node::InteractingUser_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::order_planning_node::InteractingUser_<ContainerAllocator1> & lhs, const ::order_planning_node::InteractingUser_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::order_planning_node::InteractingUser_<ContainerAllocator1> & lhs, const ::order_planning_node::InteractingUser_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace order_planning_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::order_planning_node::InteractingUser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_planning_node::InteractingUser_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_planning_node::InteractingUser_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_planning_node::InteractingUser_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_planning_node::InteractingUser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_planning_node::InteractingUser_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_planning_node::InteractingUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f48b5125444b92e93e9d05eedd634066";
  }

  static const char* value(const ::order_planning_node::InteractingUser_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf48b5125444b92e9ULL;
  static const uint64_t static_value2 = 0x3e9d05eedd634066ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_planning_node::InteractingUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_planning_node/InteractingUser";
  }

  static const char* value(const ::order_planning_node::InteractingUser_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_planning_node::InteractingUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string id\n"
"geometry_msgs/Point position\n"
"string status\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::order_planning_node::InteractingUser_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_planning_node::InteractingUser_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InteractingUser_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_planning_node::InteractingUser_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_planning_node::InteractingUser_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_PLANNING_NODE_MESSAGE_INTERACTINGUSER_H
